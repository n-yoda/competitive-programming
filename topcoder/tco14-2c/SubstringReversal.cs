using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Text;
using System.Text.RegularExpressions;


public class SubstringReversal
{
	public int[] solve(string S)
	{
        char[] bests = new char[S.Length];
        bests[S.Length - 1] = S[S.Length - 1];
        for(int i = S.Length - 2; i >= 0; i --)
        {
            bests[i] = S[i] < bests[i+1] ? S[i] : bests[i+1];
        }
        int st = 0;
        while(st < S.Length && bests[st] == S[st])
        {
            st++;
        }
        if(st >= S.Length - 1)
        {
            return new int[]{0, 0};
        }
        List<int> mxs  = new List<int>();
        for(int i = st; i < S.Length; i ++)
        {
            if(S[i] == bests[st])
                mxs.Add(i);
        }
        var j = 0;
        var newMxs = new List<int>(mxs.Capacity);
        while(mxs.Count > 1 && j < S.Length - st)
        {
            var min = 'z';
            for(int i = 0; i < mxs.Count; i ++)
            {
                var idx = mxs[i] - j;
                if(idx >= st && S[idx] < min)
                {
                    min = S[idx];
                }
                else if(idx < st && S[mxs[i] - (idx - st)] < min)
                {
                    min = S[mxs[i] - (idx - st)];
                }
            }
            newMxs.Clear();
            for(int i = 0; i < mxs.Count; i ++)
            {
                var idx = mxs[i] - j;
                if(idx >= st && S[idx] == min)
                {
                    newMxs.Add(idx);
                }
                else if(idx < st && S[mxs[i] - (idx - st)] == min)
                {
                    newMxs.Add(mxs[i] - (idx - st));
                }
            }
            j++;
            var temp = mxs;
            mxs = newMxs;
            newMxs = temp;
        }
        mxs.Sort();
        return new int[]{st, mxs[0]};
	}

	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	#region Testing code generated by KawigiEdit
	[STAThread]
	private static Boolean KawigiEdit_RunTest(int testNum, string p0, Boolean hasAnswer, int[] p1) {
		Console.Write("Test " + testNum + ": [" + "\"" + p0 + "\"");
		Console.WriteLine("]");
		SubstringReversal obj;
		int[] answer;
		obj = new SubstringReversal();
		DateTime startTime = DateTime.Now;
		answer = obj.solve(p0);
		DateTime endTime = DateTime.Now;
		Boolean res;
		res = true;
		Console.WriteLine("Time: " + (endTime - startTime).TotalSeconds + " seconds");
		if (hasAnswer) {
			Console.WriteLine("Desired answer:");
			Console.Write("\t" + "{");
			for (int i = 0; p1.Length > i; ++i) {
				if (i > 0) {
					Console.Write(",");
				}
				Console.Write(p1[i]);
			}
			Console.WriteLine("}");
		}
		Console.WriteLine("Your answer:");
		Console.Write("\t" + "{");
		for (int i = 0; answer.Length > i; ++i) {
			if (i > 0) {
				Console.Write(",");
			}
			Console.Write(answer[i]);
		}
		Console.WriteLine("}");
		if (hasAnswer) {
			if (answer.Length != p1.Length) {
				res = false;
			} else {
				for (int i = 0; answer.Length > i; ++i) {
					if (answer[i] != p1[i]) {
						res = false;
					}
				}
			}
		}
		if (!res) {
			Console.WriteLine("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime).TotalSeconds >= 2) {
			Console.WriteLine("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			Console.WriteLine("Match :-)");
		} else {
			Console.WriteLine("OK, but is it right?");
		}
		Console.WriteLine("");
		return res;
	}
    public static void Main(string[] args) {
		Boolean all_right;
		all_right = true;
		
		string p0;
		int[] p1;
		
		// ----- test 0 -----
		p0 = "abdc";
		p1 = new int[]{2,3};
		all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = "aabbcc";
		p1 = new int[]{0,0};
		all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = "misof";
		p1 = new int[]{0,4};
		all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = "ivan";
		p1 = new int[]{0,2};
		all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = "thisseemstobeaneasyproblem";
		p1 = new int[]{0,13};
		all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
		// ------------------
		
		if (all_right) {
			Console.WriteLine("You're a stud (at least on the example cases)!");
		} else {
			Console.WriteLine("Some of the test cases had errors.");
		}
	}
	#endregion
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
